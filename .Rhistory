pbinom(3,5,.)
pbinom(3,5,.5)
1-pbinom(3,5,.5)
library(swirl)
swirl()
swirl()
x
x[1:10]
is.na(x)
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x(c(3,5,7))
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names()
names(x)
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar", "norf")
identical(vect,vect2)
vect[bar]
vect[2]
vect["bar"]
vect(c("foo","bar"))
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_Vector)
class(my_vector)
my_matrix<-my_vector
?matrix()
?matrix
matrix(1:10,4,5)
matrix(1:20,4,5)
mymatrix2<-matrix(data=1:20,nrow=4,ncol=5)
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
paitents<-c("Bill", "Gina", "Kelly", "Sean")
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
LIBRARY(SWIRL)
library(swirl)
swirl()
true==true
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5<>7
5!=7
!(5==7)
FALSE&FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
ISTRUE(6>4)
isTRUE(6>4)
identical("twins", "twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
random(1:6,10000,TRUE)
rand(1:6,10000,TRUE)
sample(1:6,10000,TRUE)
die<-sample(1:6,10000,TRUE)
var(die)
die<-sample(1:6,10000,TRUE)
var(die)
die<-sample(1:6,10000,TRUE)
var(die)
die<-sample(1:6,10000,TRUE)
var(die)
die<-sample(1:6,1000000,TRUE)
var(die)
die<-sample(1:6,1000000,TRUE)
var(die)
die<-sample(1:6,1000000,TRUE)
var(die)
die<-sample(1:6,1000000,TRUE)
var(die)
die<-sample(1:6,100000000,TRUE)
var(die)
die<-sample(1:6,100000000,TRUE)
die<-sample(1:6,1000000,TRUE)
var(die)
die<-sample(1:6,1000000,TRUE)
die<-sample(1:6,100000000,TRUE)
var(die)
die<-sample(1:6,100000000,TRUE)
var(die)
die<-sample(0:1,100000000,TRUE)
var(die)
die<-sample(0:1,100000000,TRUE)
var(die)
mean(die)
die<-sample(0:1,100000000,TRUE)
mean(die)
var(die)
qt(.95,8)
qt(.95,9)
1100+c(-1,1)*qt(.95,8)*30*(1/sqrt(9))
1100+c(-1,1)*qt(.975,8)*30*(1/sqrt(9))
-2+c(-1,1)*qt(.975,8)*2*(1/sqrt(9))
-2+c(-1,1)*qt(.975,8)*3*(1/sqrt(9))
-2+c(-1,1)*qt(.975,8)*2.6*(1/sqrt(9))
-2+c(-1,1)*qt(.975,8)*2.6*(1/sqrt(9))
-2+c(-1,1)*qt(.975,9)*(-0.8)*(1/sqrt(10))
-2+c(-1,1)*qt(.975,18)*(sqrt(.6*.6+.68*.68))*(1/sqrt(5))
-2+c(-1,1)*qt(.975,18)*sqrt((.6*.6+.68*.68)/2)*(1/sqrt(5))
sqrt((.6*.6+.68*.68)/2)
-2+c(-1,1)*qt(.975,18)*sqrt((.6+.68)/2)*(1/sqrt(5))
-2+c(-1,1)*qnorm(.975)*(.1)*sqrt(4.25)
2+c(-1,1)*qnorm(.975)*(.1)*sqrt(4.25)
-4+c(-1,1)*qt(.95,8)*.3/sqrt(9)
-4+c(-1,1)*qt(.95,16)*sqrt((1.5^2+1.8^2)/2)
-4+c(-1,1)*qt(.95,16)*sqrt((1.5^2+1.8^2))/3
lamda<-.2
n<-40
rexp(n, lambda)
rexp(n, lamda)
plot(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
hist(rexp(n, lamda))
nsim<-1000
?rexp
all<-null
all<-NULL
for (i in 1:nsim) all<-c(all,rexp(n,lamda))
hist(al)
hist(all)
for (i in 1:nsim) all<-c(all,rexp(n,lamda))
hist(all)
for (i in 1:nsim) all<-c(all,rexp(n,lamda))
hist(all)
all<-NULL
for (i in 1:nsim) all<-c(all,rexp(n,lamda))
hist(all)
all<-NULL
nsim<-1000
all<-NULL
for (i in 1:1000) all<-c(all,rexp(40,.2)
)
hist(all)
all<-NULL
for (i in 1:1000) all<-c(all,rexp(40,.2))
hist(all)
all<-NULL
for (i in 1:10000) all<-c(all,rexp(40,.2))
hist(all)
all<-NULL
for (i in 1:100) all<-c(all,rexp(40,.2))
hist(all)
all<-NULL
for (i in 1:10) all<-c(all,rexp(40,.2))
hist(all)
?pnorm
qnorm(.95)
pnorm(0+qnorm(.95)*.004, .1, .04, FALSE)
pnorm(0+qnorm(.95)*.004, .1, .004, FALSE)
pnorm(qnorm(.95)*.004, .1, .004, FALSE)
pnorm(qnorm(.95)*.004, .01, .004, FALSE)
qnorm(.9, .01, .004, FALSE)
power.t.test
?power.t.test
power.t.test(delta=.01,sd=.04,sig.level=.05, power=.9, type="one.sample", alternative="one.sided")
power.t.test(delta=.01,sd=.04,sig.level=.05, power=.9, type="two.sample", alternative="one.sided")
power.t.test(delta=.01,sd=.04,sig.level=.05, power=.9, type="one.sample", alternative="two.sided")
power.t.test(delta=.01,sd=.04,sig.level=.05, power=.9, type="one.sample", alternative="one.sided")
set.seed(1234)
exp_sample_means <- NULL
for(i in 1:1000) {
exp_sample_means <- c(exp_sample_means, mean(rexp(40, 0.2)))
}
mean(exp_sample_means)
var(exp_sample_means)
data <- as.data.frame(exp_sample_means)
ggplot(data, aes(x = exp_sample_means)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
library(ggplot2)
ggplot(data, aes(x = exp_sample_means)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
library(swirl)
swirl()
swirl()
install_from_swirl("Statistical Inference")
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(.95)
swirl()
library(swirl)
swirl()
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
qnorm(.95)
z<-qnorm(.95)
pnorm(30+z, mean=30)
pnorm(30+z, mean=30, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE)
pnorm(30+z, mean=32, lower.tail=FALSE,sd=1)
pnorm(30+z, mean=32, lower.tail=FALSE,sd=2)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
?power.t.test
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 1 , sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2/4 , sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues<.05)
p.adjust(pValues,sum(pValues<.05))
?p.adjust
p.adjust(pValues,n=sum(pValues<.05))
p.adjust(pValues,methd="bonferroni",n=sum(pValues<.05))
p.adjust(pValues,method="bonferroni",n=sum(pValues<.05))
p.adjust(pValues<.05,method="bonferroni",n=sum(pValues<.05))
p.adjust(pValues<.05,method="bonferroni")
sum(p.adjust(pValues<.05,method="bonferroni")<.05)
sum(p.adjust(pValues,method="bonferroni")<.05)
sum(p.adjust(pValues,method="BH")<.05)
tail(trueStatus)
table(pValues2<.05,trueStatus)
24/10
24/500
table(sum(p.adjust(pValues,method="bonferroni")<.05),trueStatus)
table((p.adjust(pValues,method="bonferroni")<.05),trueStatus)
table(p.adjust(pValues,method="bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method="bonferroni")<.05,trueStatus)
table(p.adjust(pValues2,method="BH")<.05,trueStatus)
x<-rnorm(20)
y<-rnorm(20)
x
y
odr<-order(x)
odr
x[ord[20]]
x[odr[20]]
y[odr[20]]
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
?t.test
c(var(x),var(y))
t.test(x,y,c("two.sided"))
t.test(y,x,c("two.sided"))
cor(x,y)
xor(y,x)
cor(y,x)
cor(x,y)*sd(y)/sd(x)
t.test(cor(x,y)*sd(y)/sd(x),c("two.sided"))
t.test(cor(x,y)*sd(y)/sd(x),0,c("two.sided"))
fit<-lm(y~x)
summary(fit)
data(mtcars)
head(mtcars)
head(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
summary(lm(mtcars$mpg ~ mtcars$wt))
model<-lm(mtcars$mpg ~ mtcars$wt)
coeff(model)
coef(model)
coef(model)[1]
coef(model)[1]+coef(model)[2]*mean(mtcars$wt)
mean(mtcars$wt)
lm(mtcars$mpg ~ I(mtcars$wt-mean(mtcars$wt)))
summary(lm(mtcars$mpg ~ I(mtcars$wt-mean(mtcars$wt))))
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
yhat <- beta0 + beta1 * x
e <- y - yhat        # residuals
sigma <- sqrt(sum(e^2) / (n - 2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
yhat <- beta0 + beta1 * x
e <- y - yhat        # residuals
sigma <- sqrt(sum(e^2) / (n - 2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
yhat <- beta0 + beta1 * x
e <- y - yhat
sigma <- sqrt(sum(e^2) / (n - 2))
ssx <- sum((x - mean(x))^2)
n<-length(y)
sigma <- sqrt(sum(e^2) / (n - 2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
pBeta1
sigma
rm(list=ls())
?rm
data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
fit
summary(fit)
fit$df
nrow(mtcars)
mtcars$wt
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1,1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit <- lm(mpg ~ wt, data = mtcars)
?predict
predict(fit,wt=3)
predict(fit,data.frame(wt=3))
predict(fit,data.frame(wt=3), interval="prediction")
fit <- lm(mpg ~ I(wt / 2), data = mtcars)
coef<-summary(fit)$corfficients
coef
coef<-summary(fit)$coefficients
coef
coef[2,1]+c(-1,1)*qt(.975,fit$df)*coef[2,2]
y<-mtcars$mpg
x<-mtcars$wt
fit<-lm(y~x)
yhat<-fit$coef[1]+x
se1<-sum((y-yhat)^2)
yhat2<-fit$coef[1]+fit$coef[2]*x
se2<-sum((y-yhat2)^2)
se2/se1
se1/se2
y <- mtcars$mpg; x <- mtcars$wt
fitWithIntercept <- lm(y ~ x)
yhat1 <- fit$coefficients[1] + x
se1 <- sum((y - yhat1)^2)
yhat2 <- fit$coefficients[1] + fit$coefficients[2] * x
se2 <- sum((y - yhat2)^2)
se2/se1
ratio<-se2/se1
ratio
rm(list=ls()) # clean environment
y <- mtcars$mpg; x <- mtcars$wt
fitWithIntercept <- lm(y ~ x)
yhat1 <- fit$coefficients[1] + x
rm(list=ls()) # clean environment
y <- mtcars$mpg; x <- mtcars$wt
fit <- lm(y ~ x)
yhat1 <- fit$coefficients[1] + x
se1 <- sum((y - yhat1)^2)
>
> yhat2 <- fit$coefficients[1] + fit$coefficients[2] * x
> se2 <- sum((y - yhat2)^2)
> se2/se1
se1 <- sum((y - yhat1)^2) ; yhat2 <- fit$coefficients[1] + fit$coefficients[2] * x
se2 <- sum((y - yhat2)^2)
se2/se1
fit<-lm(y~x)
fitI<-lm(y~x-1)
fitRes<-fit$residuals^2
fitRe
fitRes
fitIRes<-fitI$residuals^2
sum(fitRes)/sum(fitResI)
sum(fitRes)/sum(fitIRes)
fitRes <- fit$residuals ^ 2
fitIntercept <- lm(mpg ~ 1, mtcars)
fitInterceptRes <- fitIntercept$residuals ^ 2
sum(fitRes) /sum(fitInterceptRes)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1,1) * qt(.975, df = fit$df) * sumCoef[2, 2]
data(mtcar)
data(mtcars)
head(mtcars)
fit<-lm(mpg ~ factor(cyl + wt, mtcars))
fit<-lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2<-lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
summary(fit)
fit3<-lm(mpg ~ factor(cyl)* wt, mtcars)
summary(fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
rm(list=ls())
?rm
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit = lm(y ~ x)
influence(fit)$hat
fit = lm(y ~ x)
influence(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit = lm(y ~ x)
dfbetas(fit)
mtcars$cyl
data(mtcars)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c('Automatic', 'Manual'))
mtcars$cyl <- factor(mtcars$cyl)
?plot
?plot
library(MASS)
?shuttle
shuttle$use.binary <- as.integer(shuttle$use == "auto")
fit <- glm(use.binary ~ wind - 1, data = shuttle, family = binomial)
summary(fit)$coef
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit <- glm(use ~ wind + as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
exp(coef(fit))
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit <- glm(count ~ spray - 1, data = InsectSprays, family = poisson)
coef.exp <- exp(coef(fit))
unname(coef.exp[1] / coef.exp[2])
x <- seq(1, 1000, by = 1)
t <- log(x)
t2 <- log(10) + t
y <- ppois(x, 2)
fit1 <- glm(y ~ x + offset(t), family = poisson, data = InsectSprays)
fit2 <- glm(y ~ x + offset(t2), family = poisson, data = InsectSprays)
summary(fit1)$coef
summary(fit2)$coef
setwd("C:/Users/AbhishekShah/ExData_Plotting1")
source("plot4.R"")
source("plot4.R")
source("plot4.R")
